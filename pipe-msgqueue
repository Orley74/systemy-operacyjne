
#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <signal.h> 
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <sys/msg.h>
#include <sys/ipc.h>
#define FIFOPID "plik_z_PID"
int K1[2]; 
int qid;
pid_t proces[3]; 
int stop = 0;
struct msgbuf {
	long mtype;
    char mtext;
};
static void send_msg(int qid, int msgtype, char text){
    struct msgbuf msg;
    msg.mtype = msgtype;
    msg.mtext=text;
    if (msgsnd(qid, &msg, sizeof(msg.mtext),
        0) == -1) {
        perror("msgsnd error");
        exit(EXIT_FAILURE);
    }
}   
static char get_msg(int qid, int msgtype){
    struct msgbuf msg;
    if (msgrcv(qid, &msg, sizeof(msg.mtext), msgtype,
        MSG_NOERROR | IPC_NOWAIT) == -1) {
       
    
        return -1;
    } else
        return msg.mtext;
}

void wyslijPID_doProc(char *nazwa)
{
	int sig = open(nazwa, O_WRONLY); 	
	write(sig, proces, sizeof(proces));
	close(sig); 
	unlink(nazwa);
}

void wyslijPID()
{
	
	wyslijPID_doProc("1");
	wyslijPID_doProc("2");
	wyslijPID_doProc("3");
}

void odbierzPID(char *nazwa)
{
	int sig = open(nazwa, O_RDONLY);
	read(sig, proces, sizeof(proces)); 
	close(sig); 
}


void wyslijDoPozostalych(int sygnal)
{
	int i;
	for(i = 0; i < 3; i++)
	{
		if(proces[i] != getpid())
		{
			kill(proces[i], sygnal);
		}
	}
}

void zatrzymaj(int sig)
{
	stop = 1; 
	if(sig == SIGTSTP) 
		wyslijDoPozostalych(SIGUSR1);  
}

void wznow(int sig)
{
	stop = 0;	
	if(sig == SIGCONT)
		wyslijDoPozostalych(SIGUSR2);			
}

void zakoncz()
{
	wyslijDoPozostalych(SIGKILL);
	exit(3);	
}

int main(void){	
	printf("Wybiez tryb pracy: 1-klawiatura 2-plik 3-random\n");

	signal(SIGCONT, wznow); 
	signal(SIGUSR2, wznow); 
	signal(SIGUSR1, zatrzymaj); 
	signal(SIGTSTP, zatrzymaj); 
	signal(SIGINT, zakoncz); 
	key_t  msgkey;
    msgkey = ftok(".", 'm');
    qid = msgget(msgkey, IPC_CREAT | 0666);
	pipe(K1);
	
	mkfifo(FIFOPID, 0777); 
	mkfifo("1", 0777); 
	mkfifo("2", 0777); 
	mkfifo("3", 0777); 
	
	if((proces[0] = fork()) == 0){
		odbierzPID("1");
		int choice;
		scanf("%d",&choice);
		char tab1[15]; 
		close(K1[0]); 
		int odczytane = 0;
	if(choice==1)
		while(1)	
		if((odczytane = read(STDIN_FILENO, tab1, sizeof(tab1))) > 0) 
		{
			printf("1");
			while(stop); 
			write(K1[1], tab1, odczytane); 
		}
		
	if(choice==2){
	char filepath[50];
	
	 printf("\nPodaj sciezke pliku:\n");
    scanf("%s", filepath);
    FILE * fp = fopen(filepath, "r");
		while(1){
			while(stop);	
		if((fgets(tab1, sizeof(tab1), fp)>0)){
			write(K1[1], tab1, strlen(tab1)); 
		}
			 
			
		}
	}
	
	if(choice==3){
   FILE * fp = fopen("//dev/urandom", "r");
		while(1){	
		fread(tab1, sizeof(tab1), 20,fp);
			write(K1[1], tab1, sizeof(tab1)); 
		
			while(stop); 
		}	
		
	}

}
	if((proces[1] = fork()) == 0){	
	odbierzPID("2");	
	close(K1[1]); 
	
	char tab1[15]; 	
	char tab2[90];
	char hexChar[10]; 
	int count = 0;
	while(1){
		
		if((count = read(K1[0], tab1, sizeof(tab1))) > 0) 
		{	
			while(stop);
			strcpy(tab2, "");
			int i;
			for(i = 0; i < count; i++) {						
				sprintf(hexChar, "%02X ", (unsigned char) tab1[i]); 
				send_msg(qid,1,hexChar[0]);
				send_msg(qid,1,hexChar[1]);	
			}
			
			count=0;
		}	
	}
}
	
	if((proces[2] = fork()) == 0){
			odbierzPID("3");
	int i=0;
	while(1){
	char a=get_msg(qid,1);
	
		if(a>1&&a<256){
			if(i%2)fprintf(stderr, "%c ", a);else
			if(i==30){fprintf(stderr, "\n%c", a); i=0;}else
			fprintf(stderr, "%c", a);
			i++;
		}
		while(stop); 
		
		
	}
}		
	
	
	wyslijPID();
	
	waitpid(proces[0], NULL, 0);
	waitpid(proces[1], NULL, 0);
	waitpid(proces[2], NULL, 0);

	
	close(K1[0]);
	close(K1[1]);
	
	msgctl( qid, IPC_RMID, 0);
	
	unlink(FIFOPID);
	
	return 0;
}	
